INSERT INTO languages (name, created_at, updated_at, deleted_at)
VALUES
('Go', DEFAULT, NULL, NULL),
('Python3', DEFAULT, NULL, NULL),
('C', DEFAULT, NULL, NULL),
('C++', DEFAULT, NULL, NULL),
('Rust', DEFAULT, NULL, NULL),
('Java', DEFAULT, NULL, NULL),
('JavaScript', DEFAULT, NULL, NULL),
('Kotlin', DEFAULT, NULL, NULL),
('PHP', DEFAULT, NULL, NULL);

INSERT INTO problems (title, difficulty, description, hints, constraints)
VALUES 
('two-sum', 'Easy', 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.', ARRAY['Use a hashmap to store each element''s index and check if the complement exists.','Consider edge cases such as no solution or multiple solutions.'], ARRAY['You may assume that each input would have exactly one solution.','You may not use the same element twice.','The order of the result does not matter.']),
('add-two-numbers', 'Medium', 'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.', ARRAY['Initialize a dummy head for the result list.','Use a carry variable to keep track of the carry from the addition of each digit.','Traverse both lists and add corresponding digits along with the carry.'], ARRAY['The number of nodes in each linked list is in the range [1, 100].','0 <= Node.val <= 9','It is guaranteed that the list represents a number that does not have leading zeros.']),
('longest-substring-without-repeating-characters', 'Medium', 'Given a string s, find the length of the longest substring without repeating characters.', ARRAY['Use a sliding window to keep track of the current substring without repeating characters.','Use a hash map to store the last index of each character.','Update the start of the window when a repeating character is found.'], ARRAY['0 <= s.length <= 5 * 10^4','s consists of English letters, digits, symbols and spaces.']),
('median-of-two-sorted-arrays', 'Hard', 'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.', ARRAY['Try to come up with a solution of logarithmic time complexity.','Use binary search to partition the arrays such that the left part contains the smallest half of the elements.','Ensure the partition is balanced to find the median.'], ARRAY['nums1.length == m','nums2.length == n','0 <= m <= 1000','0 <= n <= 1000','1 <= m + n <= 2000','-10^6 <= nums1[i], nums2[i] <= 10^6']),
('longest-palindromic-substring', 'Medium', 'Given a string s, return the longest palindromic substring in s.', ARRAY['Expand Around Center: You could use an approach that considers each character (and between characters) as the center of a potential palindrome and expand outwards.','Dynamic Programming: Use a 2D table to keep track of palindromic substrings.','Optimize with Manacher''s Algorithm for linear time complexity.'], ARRAY['1 <= s.length <= 1000','s consist of only digits and English letters.']),
('zigzag-conversion', 'Medium', 'The string ''PAYPALISHIRING'' is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)P   A   H   NA P L S I I GY   I   RAnd then read line by line: ''PAHNAPLSIIGYIR''Write the code that will take a string and make this conversion given a number of rows:', ARRAY['You can create an array of strings, one for each row.','Iterate through the characters of the string, adding each character to the appropriate row.','The pattern alternates between moving down and moving up.'], ARRAY['1 <= s.length <= 1000','s consists of English letters (lower-case and upper-case), digits, and ''.''','1 <= numRows <= 1000']),
('reverse-integer', 'Medium', 'Given a 32-bit signed integer, reverse digits of an integer.', ARRAY['Think about how you would do it on paper.','Ensure that your integer does not overflow when reversed.'], ARRAY['The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.']),
('string-to-integer-(atoi)', 'Medium', 'Implement the `atoi` function, which converts a string to an integer.', ARRAY['Consider all possible edge cases: whitespaces, signs, overflow, invalid characters, etc.','You might want to use the `bigint` data type to handle overflow cases before clamping the result.'], ARRAY['The function discards all whitespace characters at the beginning of the string.','The function processes an optional initial plus or minus sign followed by as many numerical digits as possible and interprets them as a numerical value.','The function stops processing as soon as it encounters a non-numerical character.','If the string is empty or does not contain valid digits, return 0.','If the numerical value is out of the range of a 32-bit signed integer, clamp the value to the range [−2^31, 2^31 − 1].']),
('palindrome-number', 'Easy', 'Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.', ARRAY['Negative numbers are not palindromes.','Reverse the number and compare it with the original number.'], ARRAY['Follow up: Could you solve it without converting the integer to a string?']),
('regular-expression-matching', 'Hard', 'Given an input string (s) and a pattern (p), implement regular expression matching with support for ''.'' and ''*''.', ARRAY['Consider the cases for ''.'' and ''*''.','Dynamic Programming (DP) can be useful here.'], ARRAY['The input strings consist of only lowercase English letters.','The length of both strings s and p is <= 20.','It is guaranteed that s and p are non-empty.']),
('container-with-most-water', 'Medium', 'Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.', ARRAY['The aim is to maximize the area formed between the vertical lines.','Start with two pointers approach.'], ARRAY['n == height.length','2 <= n <= 10^5','0 <= height[i] <= 10^4']),
('integer-to-roman', 'Medium', 'Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.', ARRAY['Start with the largest value and reduce the problem to smaller subproblems.', 'Use predefined mappings of roman numeral symbols to integers.'],ARRAY['1 <= num <= 3999']),
('roman-to-integer', 'Easy', 'Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.', ARRAY['Use a hashmap to store the mapping of roman numerals to integers.', 'Iterate through the string and compare current and next characters to determine the integer value.'],ARRAY['1 <= s.length <= 15', 's contains only the characters (''I'', ''V'', ''X'', ''L'', ''C'', ''D'', ''M'').', 'It is guaranteed that s is a valid roman numeral in the range [1, 3999].']),
('longest-common-prefix', 'Easy', 'Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.', ARRAY['Start with the first string as the initial prefix candidate.', 'Compare this prefix candidate with each subsequent string, updating the prefix candidate as you find common prefixes.'],ARRAY['1 <= strs.length <= 200', '0 <= strs[i].length <= 200', 'strs[i] consists of only lower-case English letters.']),
('3Sum', 'Medium', 'Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.', ARRAY['Sort the array to use two pointers technique.', 'Iterate through the array, using the current element as the first element of the triplet.', 'Use two pointers to find the other two elements that sum up to the negative of the current element.'],ARRAY['0 <= nums.length <= 3000', '-10^5 <= nums[i] <= 10^5']),
('3Sum-closest', 'Medium', 'Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.', ARRAY['Sort the array to use two pointers technique.', 'Iterate through the array, using the current element as the first element of the triplet.', 'Use two pointers to find the other two elements that sum up to the target minus the current element.'],ARRAY['3 <= nums.length <= 10^3', '-10^3 <= nums[i] <= 10^3', '-10^4 <= target <= 10^4']),
('letter-combinations-of-a-phone-number', 'Medium', 'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.', ARRAY['Use backtracking to generate all possible combinations.', 'Create a mapping from each digit to its corresponding letters on a phone keypad.', 'Iterate through each digit in the input string and recursively generate combinations by appending each possible letter.'],ARRAY['0 <= digits.length <= 4', 'digits[i] is a digit in the range [''2'', ''9''].']),
('4Sum', 'Medium', 'Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:. 0 <= a, b, c, d < n. a, b, c, and d are distinct.. nums[a] + nums[b] + nums[c] + nums[d] == targetYou may return the answer in any order.', ARRAY['Sort the array, and use recursion with backtracking to find all unique quadruplets.', 'Avoid duplicates by skipping identical numbers when iterating through the array.'],ARRAY['1 <= nums.length <= 200', '-10^9 <= nums[i] <= 10^9', '-10^9 <= target <= 10^9']),
('remove-nth-node-from-end-of-list', 'Medium', 'Given the head of a linked list, remove the nth node from the end of the list and return its head.', ARRAY['Use two pointers to find the nth node from the end in one pass.', 'Handle edge cases where the list contains only one node or removing the first node.'],ARRAY['The number of nodes in the list is sz.', '1 <= sz <= 30', '0 <= Node.val <= 100', '1 <= n <= sz']),
('valid-parentheses', 'Easy', 'Given a string containing just the characters ''('', '')'', ''{'', ''}'', ''['' and '']'', determine if the input string is valid.', ARRAY['Use a stack to keep track of opening brackets.', 'Iterate through the string, pushing opening brackets onto the stack and popping from the stack when encountering a closing bracket.', 'Check if the stack is empty at the end to determine validity.'],ARRAY['1 <= s.length <= 104', 's consists of parentheses only ''()[]{}''.']),
('merge-two-sorted-lists', 'Easy', 'Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.', ARRAY['Use a dummy node to simplify the code.', 'Iterate through both lists and compare the values, appending the smaller value to the result list.', 'Handle cases where one list is exhausted before the other.'],ARRAY['The number of nodes in both lists is in the range [0, 50].', '-100 <= Node.val <= 100', 'Both l1 and l2 are sorted in non-decreasing order.']),
('generate-parentheses', 'Medium', 'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.', ARRAY['Think recursively: to generate parentheses for n pairs, you can add ''('' or '')'' as long as it doesn''t exceed the count of each type.', 'Use backtracking to explore all possible combinations, keeping track of the balance of ''('' and '')''.'], ARRAY['1 <= n <= 8']),
('merge-k-sorted-lists', 'Hard', 'Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.', ARRAY['Use a min-heap to efficiently get the smallest element among all lists.', 'Merge lists in a divide-and-conquer approach, reducing the number of lists to merge at each step until only one list remains.'], ARRAY['0 <= k <= 10^4', '0 <= lists[i].length <= 500', '-10^4 <= lists[i][j] <= 10^4', 'lists[i] is sorted in ascending order.', 'The sum of lists[i].length won''t exceed 10^4']),
('swap-nodes-in-pairs', 'Medium', 'Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list''s nodes (i.e., only nodes themselves may be changed).', ARRAY['If you swap nodes A and B, you need to make sure their previous node points to B instead of A, and B points to A instead of its next node.', 'Handle edge cases such as an empty list or a list with only one node.'], ARRAY['The number of nodes in the list is in the range [0, 100].', '0 <= Node.val <= 100']),
('reverse-nodes-in-k-Group', 'Hard', 'Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k, then left-out nodes, in the end, should remain as it is.', ARRAY['If you have less than k nodes left in the linked list, you should reverse them as well.', 'Use recursion to solve the problem, breaking down the problem into smaller parts (reversing each k-group of nodes).'], ARRAY['The number of nodes in the list is in the range sz.', '1 <= sz <= 5000', '0 <= Node.val <= 1000', '1 <= k <= sz']),
('remove-duplicates from Sorted Array', 'Easy', 'Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.', ARRAY['In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, their positioning in the array when the given array is sorted is very important. As seen in the image below, if we know the position of one of the elements, do we also know the positioning of all the duplicate elements? ', 'We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. For example, suppose we have an array nums, which has multiple duplicates. If we know that the function is. In you want to produce of for you. The contains the described. exchange in modify is So that all'], ARRAY['1 <= nums.length <= 3 * 104', '-100 <= nums[i] <= 100', 'nums is sorted in non-decreasing order.']),
('remove-element', 'Easy', 'Given an array nums and a value val, remove all instances of that value in-place and return the new length.', ARRAY['The order of elements can be changed. It doesn''t matter what you leave beyond the new length.', 'Two pointers approach can be useful here.'], ARRAY['0 <= nums.length <= 100', '0 <= nums[i] <= 50', '0 <= val <= 100']),
('implement-strStr()', 'Easy', 'Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.', ARRAY['The naive approach is to check each substring of the haystack with the needle.', 'Use the built-in string library functions in Go to implement this efficiently.'], ARRAY['0 <= haystack.length, needle.length <= 5 * 10^4', 'haystack and needle consist of only lower-case English characters.']),
('divide-two-integers', 'Medium', 'Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.', ARRAY['Think about bit manipulation (shift operations).', 'Consider edge cases like overflow and handling of negative numbers.'], ARRAY['-2^31 <= dividend, divisor <= 2^31 - 1', 'divisor != 0']),
('substring-with-concatenation-of-all-words', 'Hard', 'You are given a string s and an array of words words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.', ARRAY['Use a sliding window approach combined with a hash map to efficiently find the substrings.', 'Consider the length of words and how they can concatenate in any order.'], ARRAY['1 <= s.length <= 10^4', 'words.length <= 5000', '1 <= words[i].length <= 30']),
('next-permutation', 'Medium', 'Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).', ARRAY['To generate the next permutation, you need to find the first pair of two successive numbers a[i] and a[i-1], from the right, which satisfy a[i] > a[i-1].', 'Once the successor is found, the next step is to find the smallest number on right side of partion index which is greater than value found in previous step.'], ARRAY['1 <= nums.length <= 100', '0 <= nums[i] <= 100']),
('longest-valid-parentheses', 'Hard', 'Given a string containing just the characters ''('' and '')'', find the length of the longest valid (well-formed) parentheses substring.', ARRAY['Use a stack to keep track of the indices of ''('' characters.', 'Scan the string from left to right and from right to left to find the longest valid substring.'], ARRAY['0 <= s.length <= 3 * 10^4', 's[i] is ''('' or '')''.']),
('search-in-rotated-sorted-array', 'Medium', 'There is an integer array nums sorted in ascending order (with distinct values). Prior to being rotated at some unknown pivot, nums was originally a sorted ascending array. You are given a target value to search. If found in the array return its index, otherwise return -1.', ARRAY['Consider using binary search for an efficient solution.', 'Think about the conditions for determining whether to search left or right of the mid-point in the array.'], ARRAY['1 <= nums.length <= 5000', '-10^4 <= nums[i], target <= 10^4', 'All values of nums are unique.', 'nums is guaranteed to be rotated at some pivot.']),
('find-first-and-last-position-of-element-in-sorted-array', 'Medium', 'Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1].', ARRAY['Consider using binary search to find the leftmost and rightmost positions of the target.', 'Implement two separate binary searches for finding the starting and ending positions.'], ARRAY['0 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9', 'nums is a non-decreasing array.']),
('search-insert-position', 'Easy', 'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.', ARRAY['Consider using binary search to find the insertion position efficiently.', 'Handle edge cases such as the target being smaller or larger than any element in the array.'], ARRAY['1 <= nums.length <= 10^4', '-10^4 <= nums[i] <= 10^4', 'nums is sorted in ascending order.']),
('valid-sudoku', 'Medium', 'Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:1. Each row must contain the digits 1-9 without repetition.2. Each column must contain the digits 1-9 without repetition.3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.', ARRAY['Use sets or arrays to track the presence of numbers in rows, columns, and sub-boxes.', 'Validate each row, column, and sub-box separately using nested loops.'], ARRAY['board.length == 9', 'board[i].length == 9', 'board[i][j] is a digit or ''.''.', 'It is guaranteed that the Sudoku board will be valid.']),
('sudoku-solver', 'Hard', 'Write a program to solve a Sudoku puzzle by filling the empty cells.A sudoku solution must satisfy all of the following rules:1. Each of the digits 1-9 must occur exactly once in each row.2. Each of the digits 1-9 must occur exactly once in each column.3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.The ''.'' character indicates empty cells.', ARRAY['Use backtracking to explore all possibilities.', 'Implement functions to check the validity of placing a number in a specific cell based on row, column, and 3x3 sub-box constraints.'], ARRAY['board.length == 9', 'board[i].length == 9', 'board[i][j] is a digit or ''.''.', 'It is guaranteed that the Sudoku puzzle will have a single unique solution.']),
('count-and-say', 'Easy', 'The count-and-say sequence is a sequence of digit strings defined by the recursive formula:1. countAndSay(1) = ''1''2. countAndSay(n) is the way you would ''say'' the digit string from countAndSay(n-1), which is then converted into a different representation.To determine how you ''say'' a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.For example, the saying and conversion for digit string ''3322251'' is ''2 3 3 2 2 1'' (''two 3s, two 2s, then one 1'').', ARRAY['Use iterative approach to generate the next sequence based on the previous one.', 'Consider using two pointers to traverse and count consecutive characters in the string.'], ARRAY['1 <= n <= 30']),
('combination-sum', 'Medium', 'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.', ARRAY['Use backtracking to explore all possible combinations.', 'Sort the candidates array to handle duplicates easily and improve efficiency.'], ARRAY['1 <= candidates.length <= 30', '1 <= candidates[i] <= 200', 'All elements of candidates are distinct.', '1 <= target <= 500']),
('combination-sum-II', 'Medium', 'Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.Each number in candidates may only be used once in the combination.Note: The solution set must not contain duplicate combinations.', ARRAY['Use backtracking to explore all possible combinations.', 'Sort the candidates array to handle duplicates easily and improve efficiency.'], ARRAY['1 <= candidates.length <= 100', '1 <= candidates[i] <= 50', '1 <= target <= 30']),
('first-missing-positive', 'Hard', 'Given an unsorted integer array nums, return the smallest missing positive integer.You must implement an algorithm that runs in O(n) time and uses constant extra space.', ARRAY['Think about how to make use of the array itself to store information.', 'Consider using a cyclic sort approach.'], ARRAY['1 <= nums.length <= 5 * 10^5', '-2 * 10^9 <= nums[i] <= 2 * 10^9']),
('trapping-rain-water', 'Hard', 'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.The height at each index i represents the elevation of the terrain at that point. The width of each bar is 1.', ARRAY['Try to solve it with two pointers.', 'Simulate the process of water flowing from the highest point to both ends.'], ARRAY['1 <= n <= 3 * 10^4', '0 <= height[i] <= 10^5']),
('multiply-strings', 'Medium', 'Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.', ARRAY['Use an array to store intermediate results of multiplication.', 'Consider how traditional multiplication works with pen and paper.'], ARRAY['1 <= num1.length, num2.length <= 200', 'num1 and num2 consist of digits only.', 'Both num1 and num2 do not contain any leading zero, except the number 0 itself.']),
('wildcard-matching', 'Hard', 'Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for ''?'' and ''*''.''?'' Matches any single character.''*'' Matches any sequence of characters (including the empty sequence).The matching should cover the entire input string (not partial).', ARRAY['Dynamic programming approach can be used to solve this problem efficiently.', 'Consider how ''?'' and ''*'' can be handled in the matching process.'], ARRAY['0 <= s.length, p.length <= 2000', 's contains only lowercase English letters.', 'p contains only lowercase English letters, ''?'' or ''*''.']),
('jump-game-II', 'Hard', 'Given an array of non-negative integers nums, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position.Your goal is to reach the last index in the minimum number of jumps.You can assume that you can always reach the last index.', ARRAY['Use a greedy approach to track the furthest point you can reach with the current number of jumps.', 'Consider how to optimize the jumps needed using the maximum reach strategy.'], ARRAY['1 <= nums.length <= 1000', '0 <= nums[i] <= 10^5']),
('permutations','Medium','Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.',ARRAY['Backtracking is an efficient way to solve this problem.','Think about how to swap elements to generate different permutations.'],ARRAY['1 <= nums.length <= 6','-10 <= nums[i] <= 10','All the integers of nums are unique.']),
('permutations-II','Medium','Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.',ARRAY['Use a similar approach to generate permutations as in the previous problem, but handle duplicates carefully.','Consider how to skip duplicates to generate unique permutations.'],ARRAY['1 <= nums.length <= 8','-10 <= nums[i] <= 10']),
('rotate-image','Medium','You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.',ARRAY['To rotate the matrix in-place, consider how elements move during rotation.','Think about how to transpose the matrix and then reverse each row to achieve the rotation.'],ARRAY['matrix.length == n','matrix[i].length == n','1 <= n <= 20','-1000 <= matrix[i][j] <= 1000']),
('group-anagrams','Medium','Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.',ARRAY['Use a hash map to store groups of anagrams.','Consider how to represent and compare anagrams efficiently.'],ARRAY['1 <= strs.length <= 10^4','0 <= strs[i].length <= 100','strs[i] consists of lower-case English letters.']),
('pow(x, n)','Medium','Implement `pow(x, n)`, which calculates `x` raised to the power `n` (i.e., `x^n`).',ARRAY['Consider how to optimize the calculation using recursion and divide-and-conquer techniques.','Handle both positive and negative values of `n`.'],ARRAY['-100.0 < x < 100.0','-2^31 <= n <= 2^31-1','-10^4 <= x^n <= 10^4']),
('n-queens','Hard','The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.',ARRAY['Use backtracking to try placing queens row by row and backtrack when a conflict is found.','Consider how to efficiently check conflicts for each placement of a queen.'],ARRAY['1 <= n <= 9']),
('n-queens-II','Hard','The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return the number of distinct solutions to the n-queens puzzle.',ARRAY['Use backtracking to try placing queens row by row and count valid solutions.','Consider how to efficiently check conflicts for each placement of a queen.'],ARRAY['1 <= n <= 9']),
('maximum-subarray','Easy','Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.',ARRAY['Consider using Kadane''s algorithm to solve this problem efficiently.','Think about how to keep track of the current maximum subarray sum as you iterate through the array.'],ARRAY['1 <= nums.length <= 3 * 10^4','-10^5 <= nums[i] <= 10^5']),
('spiral-matrix','Medium','Given an m x n matrix, return all elements of the matrix in spiral order.',ARRAY['Consider simulating the process of moving in a spiral order through the matrix.','Think about how to handle boundary conditions and direction changes efficiently.'],ARRAY['m == matrix.length','n == matrix[i].length','1 <= m, n <= 10','-100 <= matrix[i][j] <= 100']),
('jump-game','Medium','Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you can reach the last index.',ARRAY['Use a greedy approach to keep track of the furthest reachable index.','Consider how to iterate through the array and update the maximum reachable index at each step.'],ARRAY['1 <= nums.length <= 10^4','0 <= nums[i] <= 10^5']),
('merge-intervals','Medium','Given an array of intervals where intervals[i] = [start_i, end_i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.',ARRAY['Sort the intervals based on their start times to simplify the merging process.','Iterate through the sorted intervals and merge overlapping intervals.'],ARRAY['1 <= intervals.length <= 10^4','intervals[i].length == 2','0 <= start_i <= end_i <= 10^4']),
('insert-interval','Hard','Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). You may assume that the intervals were initially sorted according to their start times.',ARRAY['Sort the intervals based on their start times to simplify the insertion process.','Consider how to handle the merging of intervals after inserting the new interval.'],ARRAY['0 <= intervals.length <= 10^4','intervals[i].length == 2','0 <= intervals[i][0] <= intervals[i][1] <= 10^5','intervals is sorted by intervals[i][0] in ascending order.']),
('length-of-last-word','Easy','Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.',ARRAY['Trim the trailing and leading spaces of the string before processing.','Scan the string from the end to find the last word and calculate its length.'],ARRAY['1 <= s.length <= 10^4','s consists of only English letters and spaces '' ''.','There will be at least one word in s.']),
('spiral-matrix-II','Medium','Given a positive integer n, generate an n x n matrix filled with elements from 1 to n^2 in spiral order.',ARRAY['Simulate the process of filling the matrix in spiral order.','Keep track of the boundaries and direction changes while filling the matrix.'],ARRAY['1 <= n <= 20']),
('permutation-sequence','Medium','The set [1, 2, 3, ..., n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, return the kth permutation sequence.',ARRAY['Use a factorial-based approach to determine the digit at each position.','Consider how to efficiently find and construct the kth permutation sequence.'],ARRAY['1 <= n <= 9','1 <= k <= n!']);

INSERT INTO topics (name, created_at, updated_at, deleted_at)
VALUES
('array', DEFAULT, NULL, NULL),
('string', DEFAULT, NULL, NULL),
('linked-list', DEFAULT, NULL, NULL),
('stack', DEFAULT, NULL, NULL),
('queue', DEFAULT, NULL, NULL),
('tree', DEFAULT, NULL, NULL),
('binary-search', DEFAULT, NULL, NULL),
('heap', DEFAULT, NULL, NULL),
('hash-table', DEFAULT, NULL, NULL),
('two-pointers', DEFAULT, NULL, NULL),
('depth-first-search', DEFAULT, NULL, NULL),
('breadth-first_search', DEFAULT, NULL, NULL),
('backtracking', DEFAULT, NULL, NULL),
('dynamic-programming', DEFAULT, NULL, NULL),
('greedy', DEFAULT, NULL, NULL),
('design', DEFAULT, NULL, NULL),
('math', DEFAULT, NULL, NULL),
('bit-manipulation', DEFAULT, NULL, NULL),
('sorting', DEFAULT, NULL, NULL),
('recursion', DEFAULT, NULL, NULL),
('memoization', DEFAULT, NULL, NULL),
('segment_tree', DEFAULT, NULL, NULL),
('union-find', DEFAULT, NULL, NULL),
('trie', DEFAULT, NULL, NULL),
('sliding-window', DEFAULT, NULL, NULL),
('binary-indexed-tree', DEFAULT, NULL, NULL),
('topological-sort', DEFAULT, NULL, NULL),
('minimum-spanning-tree', DEFAULT, NULL, NULL),
('suffix-array', DEFAULT, NULL, NULL),
('geometry', DEFAULT, NULL, NULL),
('simulation', DEFAULT, NULL, NULL),
('probability', DEFAULT, NULL, NULL),
('concurrency', DEFAULT, NULL, NULL),
('divide-and-concuer', DEFAULT, NULL, NULL),
('matrix', DEFAULT, NULL, NULL),
('database', DEFAULT, NULL, NULL);

INSERT INTO users (username, full_name, email, password, profile_image, gender, location, birthday, summary, website, github, linkedin, created_at, updated_at, deleted_at)
VALUES
    ('jdoe', 'John Doe', 'jdoe@example.com', 'password123', NULL, 'Male', 'New York', '1985-07-15', 'Software developer with 10 years of experience.', 'https://johndoe.com', 'https://github.com/jdoe', 'https://linkedin.com/in/jdoe', NOW(), NULL, NULL),
    ('asmith', 'Alice Smith', 'asmith@example.com', 'password123', NULL, 'Female', 'Los Angeles', '1990-08-20', 'Project manager at a tech company.', 'https://alicesmith.com', 'https://github.com/asmith', 'https://linkedin.com/in/asmith', NOW(), NULL, NULL),
    ('bwayne', 'Bruce Wayne', 'bwayne@example.com', 'password123', NULL, 'Male', 'Gotham', '1972-02-19', 'Philanthropist and CEO of Wayne Enterprises.', 'https://brucewayne.com', 'https://github.com/bwayne', 'https://linkedin.com/in/bwayne', NOW(), NULL, NULL),
    ('clarkk', 'Clark Kent', 'clarkk@example.com', 'password123', NULL, 'Male', 'Metropolis', '1980-06-18', 'Journalist at the Daily Planet.', 'https://clarkkent.com', 'https://github.com/clarkk', 'https://linkedin.com/in/clarkk', NOW(), NULL, NULL),
    ('dprince', 'Diana Prince', 'dprince@example.com', 'password123', NULL, 'Female', 'Themyscira', '1985-03-22', 'Ambassador and warrior.', 'https://dianaprince.com', 'https://github.com/dprince', 'https://linkedin.com/in/dprince', NOW(), NULL, NULL),
    ('eallen', 'Barry Allen', 'eallen@example.com', 'password123', NULL, 'Male', 'Central City', '1992-09-25', 'Forensic scientist at CCPD.', 'https://barryallen.com', 'https://github.com/eallen', 'https://linkedin.com/in/eallen', NOW(), NULL, NULL),
    ('pparker', 'Peter Parker', 'pparker@example.com', 'password123', NULL, 'Male', 'New York', '1995-08-10', 'Photographer at the Daily Bugle.', 'https://peterparker.com', 'https://github.com/pparker', 'https://linkedin.com/in/pparker', NOW(), NULL, NULL),
    ('stark', 'Tony Stark', 'stark@example.com', 'password123', NULL, 'Male', 'Los Angeles', '1970-05-29', 'CEO of Stark Industries.', 'https://tonystark.com', 'https://github.com/stark', 'https://linkedin.com/in/stark', NOW(), NULL, NULL),
    ('rrogers', 'Steve Rogers', 'rrogers@example.com', 'password123', NULL, 'Male', 'Brooklyn', '1918-07-04', 'Soldier and strategist.', 'https://steverogers.com', 'https://github.com/rrogers', 'https://linkedin.com/in/rrogers', NOW(), NULL, NULL),
    ('nromanoff', 'Natasha Romanoff', 'nromanoff@example.com', 'password123', NULL, 'Female', 'Stalingrad', '1984-12-03', 'Spy and assassin.', 'https://natasharomanoff.com', 'https://github.com/nromanoff', 'https://linkedin.com/in/nromanoff', NOW(), NULL, NULL),

    ('tchalla', 'TChalla', 'tchalla@example.com', 'password123', NULL, 'Male', 'Wakanda', '1980-11-11', 'King of Wakanda.', 'https://tchalla.com', 'https://github.com/tchalla', 'https://linkedin.com/in/tchalla', NOW(), NULL, NULL),
    ('spalmer', 'Sara Palmer', 'spalmer@example.com', 'password123', NULL, 'Female', 'Star City', '1992-03-13', 'Medical professional.', 'https://sarapalmer.com', 'https://github.com/spalmer', 'https://linkedin.com/in/spalmer', NOW(), NULL, NULL),
    ('owilson', 'Oliver Wilson', 'owilson@example.com', 'password123', NULL, 'Male', 'Star City', '1985-12-09', 'Entrepreneur and archer.', 'https://oliverwilson.com', 'https://github.com/owilson', 'https://linkedin.com/in/owilson', NOW(), NULL, NULL),
    ('hlance', 'Laurel Lance', 'hlance@example.com', 'password123', NULL, 'Female', 'Star City', '1987-07-20', 'Lawyer and vigilante.', 'https://laurellance.com', 'https://github.com/hlance', 'https://linkedin.com/in/hlance', NOW(), NULL, NULL),
    ('fqueen', 'Felicity Queen', 'fqueen@example.com', 'password123', NULL, 'Female', 'Star City', '1988-10-14', 'IT specialist.', 'https://felicityqueen.com', 'https://github.com/fqueen', 'https://linkedin.com/in/fqueen', NOW(), NULL, NULL),
    ('kgordon', 'Kara Gordon', 'kgordon@example.com', 'password123', NULL, 'Female', 'National City', '1985-08-22', 'Journalist and superhero.', 'https://karagordon.com', 'https://github.com/kgordon', 'https://linkedin.com/in/kgordon', NOW(), NULL, NULL),
    ('blane', 'Barry Lane', 'blane@example.com', 'password123', NULL, 'Male', 'Central City', '1990-05-17', 'Scientist and speedster.', 'https://barrylane.com', 'https://github.com/blane', 'https://linkedin.com/in/blane', NOW(), NULL, NULL),
    ('amarvel', 'Carol Marvel', 'amarvel@example.com', 'password123', NULL, 'Female', 'New York', '1983-12-18', 'Pilot and superhero.', 'https://carolmarvel.com', 'https://github.com/amarvel', 'https://linkedin.com/in/amarvel', NOW(), NULL, NULL),
    ('mscott', 'Michael Scott', 'mscott@example.com', 'password123', NULL, 'Male', 'Scranton', '1964-03-15', 'Regional Manager at Dunder Mifflin.', 'https://michaelscott.com', 'https://github.com/mscott', 'https://linkedin.com/in/mscott', NOW(), NULL, NULL),
    ('jhalpert', 'Jim Halpert', 'jhalpert@example.com', 'password123', NULL, 'Male', 'Scranton', '1978-10-01', 'Salesman at Dunder Mifflin.', 'https://jimhalpert.com', 'https://github.com/jhalpert', 'https://linkedin.com/in/jhalpert', NOW(), NULL, NULL),

    ('dwightk', 'Dwight Schrute', 'dwightk@example.com', 'password123', NULL, 'Male', 'Scranton', '1970-01-20', 'Assistant to the Regional Manager.', 'https://dwightschrute.com', 'https://github.com/dwightk', 'https://linkedin.com/in/dwightk', NOW(), NULL, NULL),
    ('pbeesly', 'Pam Beesly', 'pbeesly@example.com', 'password123', NULL, 'Female', 'Scranton', '1979-03-25', 'Receptionist at Dunder Mifflin.', 'https://pambeesly.com', 'https://github.com/pbeesly', 'https://linkedin.com/in/pbeesly', NOW(), NULL, NULL),
    ('rbernard', 'Andy Bernard', 'rbernard@example.com', 'password123', NULL, 'Male', 'Scranton', '1973-04-01', 'Salesman at Dunder Mifflin.', 'https://andybernard.com', 'https://github.com/rbernard', 'https://linkedin.com/in/rbernard', NOW(), NULL, NULL),
    ('dhoward', 'Dwight Howard', 'dhoward@example.com', 'password123', NULL, 'Male', 'Scranton', '1970-01-01', 'Salesman at Dunder Mifflin.', 'https://dwighthoward.com', 'https://github.com/dhoward', 'https://linkedin.com/in/dhoward', NOW(), NULL, NULL),
    ('hkeller', 'Helen Keller', 'hkeller@example.com', 'password123', NULL, 'Female', 'Alabama', '1880-06-27', 'Author and lecturer.', 'https://helenkeller.com', 'https://github.com/hkeller', 'https://linkedin.com/in/hkeller', NOW(), NULL, NULL),
    ('larmstrong', 'Louis Armstrong', 'larmstrong@example.com', 'password123', NULL, 'Male', 'New Orleans', '1901-08-04', 'Jazz musician.', 'https://louisarmstrong.com', 'https://github.com/larmstrong', 'https://linkedin.com/in/larmstrong', NOW(), NULL, NULL),
    ('mdavis', 'Miles Davis', 'mdavis@example.com', 'password123', NULL, 'Male', 'Illinois', '1926-05-26', 'Jazz trumpeter.', 'https://milesdavis.com', 'https://github.com/mdavis', 'https://linkedin.com/in/mdavis', NOW(), NULL, NULL),
    ('bholiday', 'Billie Holiday', 'bholiday@example.com', 'password123', NULL, 'Female', 'Philadelphia', '1915-04-07', 'Jazz singer.', 'https://billieholiday.com', 'https://github.com/bholiday', 'https://linkedin.com/in/bholiday', NOW(), NULL, NULL),
    ('efitzgerald', 'Ella Fitzgerald', 'efitzgerald@example.com', 'password123', NULL, 'Female', 'Virginia', '1917-04-25', 'Jazz singer.', 'https://ellafitzgerald.com', 'https://github.com/efitzgerald', 'https://linkedin.com/in/efitzgerald', NOW(), NULL, NULL),
    ('jcoltrane', 'John Coltrane', 'jcoltrane@example.com', 'password123', NULL, 'Male', 'North Carolina', '1926-09-23', 'Jazz saxophonist.', 'https://johncoltrane.com', 'https://github.com/jcoltrane', 'https://linkedin.com/in/jcoltrane', NOW(), NULL, NULL),

    ('ccook', 'Captain Cook', 'ccook@example.com', 'password123', NULL, 'Male', 'England', '1728-10-27', 'Explorer and navigator.', 'https://captaincook.com', 'https://github.com/ccook', 'https://linkedin.com/in/ccook', NOW(), NULL, NULL),
    ('jcrane', 'Ichabod Crane', 'jcrane@example.com', 'password123', NULL, 'Male', 'Sleepy Hollow', '1790-01-01', 'Schoolteacher.', 'https://ichabodcrane.com', 'https://github.com/jcrane', 'https://linkedin.com/in/jcrane', NOW(), NULL, NULL),
    ('sfrost', 'Sam Frost', 'sfrost@example.com', 'password123', NULL, 'Male', 'Snow Town', '1985-01-01', 'Explorer and adventurer.', 'https://samfrost.com', 'https://github.com/sfrost', 'https://linkedin.com/in/sfrost', NOW(), NULL, NULL),
    ('rsnow', 'Jon Snow', 'rsnow@example.com', 'password123', NULL, 'Male', 'Winterfell', '1988-12-07', 'Warrior and leader.', 'https://jonsnow.com', 'https://github.com/rsnow', 'https://linkedin.com/in/rsnow', NOW(), NULL, NULL),
    ('kharington', 'Kit Harington', 'kharington@example.com', 'password123', NULL, 'Male', 'London', '1986-12-26', 'Actor.', 'https://kitharington.com', 'https://github.com/kharington', 'https://linkedin.com/in/kharington', NOW(), NULL, NULL),
    ('ewood', 'Elijah Wood', 'ewood@example.com', 'password123', NULL, 'Male', 'Iowa', '1981-01-28', 'Actor.', 'https://elijahwood.com', 'https://github.com/ewood', 'https://linkedin.com/in/ewood', NOW(), NULL, NULL),
    ('dsnow', 'Davos Seaworth', 'dsnow@example.com', 'password123', NULL, 'Male', 'Dragonstone', '1970-01-01', 'Smuggler turned knight.', 'https://davosseaworth.com', 'https://github.com/dsnow', 'https://linkedin.com/in/dsnow', NOW(), NULL, NULL),
    ('pmcbride', 'Paul McBride', 'pmcbride@example.com', 'password123', NULL, 'Male', 'New York', '1992-05-23', 'Musician and composer.', 'https://paulmcbride.com', 'https://github.com/pmcbride', 'https://linkedin.com/in/pmcbride', NOW(), NULL, NULL),
    ('mbj', 'Michael B. Jordan', 'mbj@example.com', 'password123', NULL, 'Male', 'California', '1987-02-09', 'Actor.', 'https://michaelbjordan.com', 'https://github.com/mbj', 'https://linkedin.com/in/mbj', NOW(), NULL, NULL),
    ('tbell', 'Tom Bell', 'tbell@example.com', 'password123', NULL, 'Male', 'Chicago', '1991-10-02', 'Software engineer.', 'https://tombell.com', 'https://github.com/tbell', 'https://linkedin.com/in/tbell', NOW(), NULL, NULL),

    ('srogers', 'Steve Rogers', 'srogers@example.com', 'password123', NULL, 'Male', 'Brooklyn', '1918-07-04', 'Soldier and leader.', 'https://steverogers.com', 'https://github.com/srogers', 'https://linkedin.com/in/srogers', NOW(), NULL, NULL),
    ('bbarnes', 'Bucky Barnes', 'bbarnes@example.com', 'password123', NULL, 'Male', 'Brooklyn', '1917-03-10', 'Soldier and strategist.', 'https://buckybarnes.com', 'https://github.com/bbarnes', 'https://linkedin.com/in/bbarnes', NOW(), NULL, NULL),
    ('abanner', 'Bruce Banner', 'abanner@example.com', 'password123', NULL, 'Male', 'Dayton', '1969-12-18', 'Scientist.', 'https://brucebanner.com', 'https://github.com/abanner', 'https://linkedin.com/in/abanner', NOW(), NULL, NULL),
    ('hhogan', 'Happy Hogan', 'hhogan@example.com', 'password123', NULL, 'Male', 'New York', '1970-04-26', 'Security head.', 'https://happyhogan.com', 'https://github.com/hhogan', 'https://linkedin.com/in/hhogan', NOW(), NULL, NULL),
    ('rpalmer', 'Ray Palmer', 'rpalmer@example.com', 'password123', NULL, 'Male', 'Ivy Town', '1985-10-30', 'Scientist and inventor.', 'https://raypalmer.com', 'https://github.com/rpalmer', 'https://linkedin.com/in/rpalmer', NOW(), NULL, NULL),
    ('ksnow', 'Kit Snow', 'ksnow@example.com', 'password123', NULL, 'Male', 'Winterfell', '1988-12-07', 'Warrior and leader.', 'https://kitsnow.com', 'https://github.com/ksnow', 'https://linkedin.com/in/ksnow', NOW(), NULL, NULL),
    ('ebard', 'Eobard Thawne', 'ebard@example.com', 'password123', NULL, 'Male', 'Central City', '1992-01-20', 'Scientist and speedster.', 'https://eobardthawne.com', 'https://github.com/ebard', 'https://linkedin.com/in/ebard', NOW(), NULL, NULL),
    ('tbell2', 'Tom Bell', 'tbell2@example.com', 'password123', NULL, 'Male', 'Chicago', '1991-10-02', 'Software engineer.', 'https://tombell.com', 'https://github.com/tbell2', 'https://linkedin.com/in/tbell2', NOW(), NULL, NULL),
    ('bparker', 'Ben Parker', 'bparker@example.com', 'password123', NULL, 'Male', 'New York', '1950-05-15', 'Uncle and mentor.', 'https://benparker.com', 'https://github.com/bparker', 'https://linkedin.com/in/bparker', NOW(), NULL, NULL),
    ('dplamer', 'Daisy Palmer', 'dplamer@example.com', 'password123', NULL, 'Female', 'Ivy Town', '1985-10-30', 'Scientist and inventor.', 'https://daisypalmer.com', 'https://github.com/dplamer', 'https://linkedin.com/in/dplamer', NOW(), NULL, NULL),

    ('jsmith', 'John Smith', 'jsmith@example.com', 'password123', NULL, 'Male', 'New York', '1980-01-01', 'Software engineer.', 'https://johnsmith.com', 'https://github.com/jsmith', 'https://linkedin.com/in/jsmith', NOW(), NULL, NULL),
    ('adoe', 'Jane Doe', 'adoe@example.com', 'password123', NULL, 'Female', 'Los Angeles', '1985-05-15', 'Designer.', 'https://janedoe.com', 'https://github.com/adoe', 'https://linkedin.com/in/adoe', NOW(), NULL, NULL),
    ('jwhite', 'Jack White', 'jwhite@example.com', 'password123', NULL, 'Male', 'Chicago', '1990-07-20', 'Musician.', 'https://jackwhite.com', 'https://github.com/jwhite', 'https://linkedin.com/in/jwhite', NOW(), NULL, NULL),
    ('kblue', 'Kathy Blue', 'kblue@example.com', 'password123', NULL, 'Female', 'San Francisco', '1975-09-10', 'Artist.', 'https://kathyblue.com', 'https://github.com/kblue', 'https://linkedin.com/in/kblue', NOW(), NULL, NULL),
    ('jgreen', 'James Green', 'jgreen@example.com', 'password123', NULL, 'Male', 'Miami', '1982-03-22', 'Architect.', 'https://jamesgreen.com', 'https://github.com/jgreen', 'https://linkedin.com/in/jgreen', NOW(), NULL, NULL),
    ('mdavis2', 'Martha Davis', 'mdavis2@example.com', 'password123', NULL, 'Female', 'Dallas', '1995-11-30', 'Engineer.', 'https://marthadavis.com', 'https://github.com/mdavis2', 'https://linkedin.com/in/mdavis2', NOW(), NULL, NULL),
    ('mbrown', 'Michael Brown', 'mbrown@example.com', 'password123', NULL, 'Male', 'Houston', '1980-06-05', 'Manager.', 'https://michaelbrown.com', 'https://github.com/mbrown', 'https://linkedin.com/in/mbrown', NOW(), NULL, NULL),
    ('jpink', 'Julie Pink', 'jpink@example.com', 'password123', NULL, 'Female', 'Phoenix', '1992-08-25', 'Marketing specialist.', 'https://juliepink.com', 'https://github.com/jpink', 'https://linkedin.com/in/jpink', NOW(), NULL, NULL),
    ('jred', 'Johnny Red', 'jred@example.com', 'password123', NULL, 'Male', 'Philadelphia', '1987-04-14', 'Actor.', 'https://johnnyred.com', 'https://github.com/jred', 'https://linkedin.com/in/jred', NOW(), NULL, NULL),
    ('kpurple', 'Kim Purple', 'kpurple@example.com', 'password123', NULL, 'Female', 'San Diego', '1990-12-19', 'Writer.', 'https://kimpurple.com', 'https://github.com/kpurple', 'https://linkedin.com/in/kpurple', NOW(), NULL, NULL);
